name: CI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
    - master
    tags:
    - '*'
    paths:
    - .github/workflows/integration.yml
    - sonar-project.properties
    - structure-test.yaml
    - Dockerfile
    - .dockerignore
    - '**.c'
  pull_request:
    branches:
    - master
    paths:
    - .github/workflows/integration.yml
    - sonar-project.properties
    - structure-test.yaml
    - Dockerfile
    - .dockerignore
    - '**.c'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: export env
      uses: krisalay/export-env@v1.0.0
      with:
        filename: .env
    - name: generate docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v3.2.0
      with:
        images: ${{ github.repository }}
        tags: |
          type=edge
        # yamllint disable rule:line-length
        labels: |
          org.opencontainers.image.authors=${{ secrets.OCI_AUTHORS }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.vendor=${{ secrets.OCI_AUTHORS }}
        # yamllint enable rule:line-length
        github-token: ${{ github.token }}
    - name: set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: cache buildx
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${{ runner.temp }}/.buildx-cache
        # yamllint disable-line rule:line-length
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore', 'minit.c') }}
        # yamllint disable rule:line-length
        restore-keys: |
          ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore', 'minit.c') }}
          ${{ runner.os }}-buildx-
        # yamllint enable rule:line-length
    - name: build
      uses: docker/build-push-action@v2
      with:
        push: false
        load: false
        target: minit
        build-args: |
          PROCPS_VERSION=${{ env.PROCPS_VERSION }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-to: |
          type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache
        cache-from: |
          type=local,src=${{ runner.temp }}/.buildx-cache
          ${{ steps.docker_meta.outputs.tags }}
        tags: ${{ steps.docker_meta.outputs.tags }}
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: export env
      uses: krisalay/export-env@v1.0.0
      with:
        filename: .env
    - name: generate docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v3.2.0
      with:
        images: ${{ github.repository }}
        tags: |
          type=raw,value=test
        # yamllint disable rule:line-length
        labels: |
          org.opencontainers.image.authors=${{ secrets.OCI_AUTHORS }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.vendor=${{ secrets.OCI_AUTHORS }}
        # yamllint enable rule:line-length
        github-token: ${{ github.token }}
    - name: set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: cache buildx
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${{ runner.temp }}/.buildx-cache
        # yamllint disable-line rule:line-length
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore', 'minit.c') }}
        # yamllint disable rule:line-length
        restore-keys: |
          ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore', 'minit.c') }}
          ${{ runner.os }}-buildx-
        # yamllint enable rule:line-length
    - name: test build
      uses: docker/build-push-action@v2
      with:
        push: false
        load: false
        target: test
        build-args: |
          PROCPS_VERSION=${{ env.PROCPS_VERSION }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-to: |
          type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache
        cache-from: |
          type=local,src=${{ runner.temp }}/.buildx-cache
          ${{ steps.docker_meta.outputs.tags }}
    - name: final build
      uses: docker/build-push-action@v2
      with:
        push: false
        load: true
        build-args: |
          PROCPS_VERSION=${{ env.PROCPS_VERSION }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-to: |
          type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache
        cache-from: |
          type=local,src=${{ runner.temp }}/.buildx-cache
          ${{ steps.docker_meta.outputs.tags }}
        tags: ${{ steps.docker_meta.outputs.tags }}
    - name: test structure
      uses: brpaz/structure-tests-action@v1.1.2
      with:
        image: ${{ steps.docker_meta.outputs.tags }}
        configFile: structure-test.yaml
  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: export env
      uses: krisalay/export-env@v1.0.0
      with:
        filename: .env
    - name: generate docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v3.2.0
      with:
        images: ${{ github.repository }}
        tags: |
          type=raw,value=latest
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        # yamllint disable rule:line-length
        labels: |
          org.opencontainers.image.authors=${{ secrets.OCI_AUTHORS }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.vendor=${{ secrets.OCI_AUTHORS }}
        # yamllint enable rule:line-length
        github-token: ${{ github.token }}
    - name: set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: cache buildx
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${{ runner.temp }}/.buildx-cache
        # yamllint disable-line rule:line-length
        key: ${{ runner.os }}-multiarch-${{ hashFiles('Dockerfile', '.dockerignore', 'minit.c') }}
        # yamllint disable rule:line-length
        restore-keys: |
          ${{ runner.os }}-multiarch-${{ hashFiles('Dockerfile', '.dockerignore', 'minit.c') }}
          ${{ runner.os }}-multiarch-
        # yamllint enable rule:line-length
    - name: login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: build & push multi-arch image
      uses: docker/build-push-action@v2
      with:
        push: ${{ github.event_name != 'pull_request' }}
        platforms: linux/amd64,linux/arm/v7,linux/arm64
        build-args: |
          PROCPS_VERSION=${{ env.PROCPS_VERSION }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-to: |
          type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache
        cache-from: |
          type=local,src=${{ runner.temp }}/.buildx-cache
          ${{ steps.docker_meta.outputs.tags }}
        tags: ${{ steps.docker_meta.outputs.tags }}
    - name: update DockerHub description
      if: github.event_name != 'pull_request'
      uses: meeDamian/sync-readme@v1.0.6
      with:
        pass: ${{ secrets.DOCKER_PASSWORD }}
        description: true
    - name: create release
      uses: ncipollo/release-action@v1
      id: create-release-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        generateReleaseNotes: true
        token: ${{ secrets.GITHUB_TOKEN }}
